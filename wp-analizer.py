# -*- coding: utf-8 -*-
# wp-analizer.py

import sys
import os
import traceback
import sqlite3 # Standart kÃ¼tÃ¼phane

# --- Gerekli KÃ¼tÃ¼phaneleri Kontrol Et ---
try:
    import pandas as pd
except ImportError:
    print("Hata: 'pandas' kÃ¼tÃ¼phanesi bulunamadÄ±.")
    print("LÃ¼tfen kurun: pip install pandas")
    sys.exit(1)
try:
    from PIL import Image
except ImportError:
     print("Hata: 'Pillow' kÃ¼tÃ¼phanesi bulunamadÄ± (PIL yerine kullanÄ±lÄ±r).")
     print("LÃ¼tfen kurun: pip install Pillow")
     sys.exit(1)
try:
     # Matplotlib grafik Ã§izimi iÃ§in
     import matplotlib.pyplot as plt
     # KullanÄ±cÄ± arayÃ¼zÃ¼ olmayan sistemlerde hata vermemesi iÃ§in backend ayarÄ±
     import matplotlib
     matplotlib.use('Agg') # 'Agg' backend'i grafik Ã§izimini dosyaya yapar, GUI gerektirmez
except ImportError:
     print("Hata: 'matplotlib' kÃ¼tÃ¼phanesi bulunamadÄ±.")
     print("LÃ¼tfen kurun: pip install matplotlib")
     sys.exit(1)

# Renkler (opsiyonel)
try:
    from colorama import init, Fore, Style
    init(autoreset=True)
    R = Fore.RED; Y = Fore.YELLOW; G = Fore.GREEN; C = Fore.CYAN; RESET = Style.RESET_ALL
except ImportError:
    R = Y = G = C = RESET = ""

# --- UyarÄ±lar ---
print(f"""{Y}
=================== UYARI ===================
- Bu araÃ§, ÅŸifrelenmemiÅŸ WhatsApp mesaj veritabanÄ±nÄ± ('msgstore.db')
  analiz etmek iÃ§in tasarlanmÄ±ÅŸtÄ±r.
- 'msgstore.db' dosyasÄ±na eriÅŸim genellikle ROOT YETKÄ°SÄ° gerektirir
  ve/veya telefonunuzdan manuel olarak kopyalamanÄ±z gerekir.
- VeritabanÄ± ÅŸifreliyse (crypt12, crypt14 vb.), bu betik doÄŸrudan
  Ã§alÄ±ÅŸmaz. Ã–nce ÅŸifresinin Ã§Ã¶zÃ¼lmesi gerekir (bu iÅŸlem ayrÄ± araÃ§lar
  ve anahtar dosyasÄ± gerektirir).
- Bu betik 'pandas', 'Pillow' ve 'matplotlib' kÃ¼tÃ¼phanelerini
  gerektirir. Eksikse 'pip install pandas Pillow matplotlib' ile kurun.
- GizliliÄŸe dikkat edin! BaÅŸkalarÄ±nÄ±n mesajlarÄ±nÄ± izinsiz analiz
  etmek yasal ve etik deÄŸildir.
===========================================
{RESET}""")

DEFAULT_DB_PATH = "msgstore.db"

class WhatsAppAnalyzer:
    def __init__(self, db_path=DEFAULT_DB_PATH):
        self.db_path = db_path
        self.conn = None
        self.cursor = None

        if not os.path.exists(self.db_path):
            print(f"{R}Hata: VeritabanÄ± dosyasÄ± bulunamadÄ±: '{self.db_path}'{RESET}")
            print(f"{Y}LÃ¼tfen 'msgstore.db' dosyasÄ±nÄ±n bu betikle aynÄ± dizinde olduÄŸundan emin olun veya doÄŸru yolu belirtin.{RESET}")
            # sys.exit(1) # Hata durumunda Ã§Ä±kmak yerine None dÃ¶ndÃ¼rebiliriz
            raise FileNotFoundError(f"VeritabanÄ± dosyasÄ± bulunamadÄ±: {self.db_path}")

        print(f"{C}'{self.db_path}' veritabanÄ±na baÄŸlanÄ±lÄ±yor...{RESET}")
        try:
            # VeritabanÄ± baÄŸlantÄ±sÄ±
            # Check_same_thread=False multithreading iÃ§in gerekebilir ama burada gereksiz gibi.
            self.conn = sqlite3.connect(self.db_path) # URI=True kullanmak daha modern olabilir
            self.cursor = self.conn.cursor()
            print(f"{G}VeritabanÄ± baÄŸlantÄ±sÄ± baÅŸarÄ±lÄ±.{RESET}")
            # Temel tablo kontrolÃ¼
            self.cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='messages';")
            if not self.cursor.fetchone():
                 print(f"{R}Hata: VeritabanÄ±nda 'messages' tablosu bulunamadÄ±! Dosya bozuk veya ÅŸifreli olabilir.{RESET}")
                 self.conn.close()
                 raise ValueError("Messages tablosu bulunamadÄ±.")

        except sqlite3.Error as e:
            print(f"{R}SQLite HatasÄ±: VeritabanÄ±na baÄŸlanÄ±lamadÄ± veya okunamadÄ±!{RESET}")
            print(f"{R}Detay: {e}{RESET}")
            print(f"{Y}DosyanÄ±n ÅŸifreli olmadÄ±ÄŸÄ±ndan veya bozuk olmadÄ±ÄŸÄ±ndan emin olun.{RESET}")
            if self.conn: self.conn.close()
            raise # HatayÄ± tekrar fÄ±rlat ki program devam etmesin
        except Exception as e:
             print(f"{R}VeritabanÄ± baÄŸlantÄ±sÄ±nda beklenmedik hata: {e}{RESET}")
             if self.conn: self.conn.close()
             raise

    def close_connection(self):
        """VeritabanÄ± baÄŸlantÄ±sÄ±nÄ± kapatÄ±r."""
        if self.conn:
            self.conn.close()
            print(f"{Y}VeritabanÄ± baÄŸlantÄ±sÄ± kapatÄ±ldÄ±.{RESET}")

    def analyze_messages(self):
        """MesajlarÄ± okur ve Pandas DataFrame'e yÃ¼kler."""
        if not self.conn: return None
        print(f"{C}Mesajlar okunuyor ve analiz ediliyor...{RESET}")
        try:
            # SQL sorgusu (sÃ¼tun isimleri WhatsApp sÃ¼rÃ¼mÃ¼ne gÃ¶re deÄŸiÅŸebilir)
            # 'key_remote_jid' genellikle gÃ¶nderen/alan kiÅŸiyi belirtir.
            # 'timestamp' ms cinsinden olabilir, 1000'e bÃ¶lerek saniyeye Ã§eviriyoruz.
            # 'data' mesaj iÃ§eriÄŸi (text), 'media_wa_type' medya tipini gÃ¶sterebilir.
            query = """
                SELECT
                    timestamp / 1000 as unix_time, -- Saniyeye Ã§evir
                    datetime(timestamp / 1000, 'unixepoch', 'localtime') as datetime_str, -- Okunabilir tarih
                    key_remote_jid as contact,
                    CASE from_me WHEN 0 THEN 'AlÄ±nan' ELSE 'GÃ¶nderilen' END as direction, -- Mesaj yÃ¶nÃ¼
                    data as message_text, -- Text mesajlar iÃ§in
                    media_wa_type as media_type, -- Medya tipi (0: text, 1: image, 2: audio, 3: video, etc.)
                    media_size as media_size_bytes -- Medya boyutu
                FROM messages
                ORDER BY timestamp ASC
            """
            # Sorguyu Pandas ile Ã§alÄ±ÅŸtÄ±r
            df = pd.read_sql_query(query, self.conn)

            # Zaman damgasÄ±nÄ± datetime nesnesine Ã§evir
            df['datetime'] = pd.to_datetime(df['unix_time'], unit='s')

            print(f"{G}Toplam {len(df)} mesaj baÅŸarÄ±yla okundu.{RESET}")
            return df

        except pd.io.sql.DatabaseError as e:
             print(f"{R}Pandas SQL HatasÄ±: Sorgu Ã§alÄ±ÅŸtÄ±rÄ±lamadÄ± veya tablo/sÃ¼tun bulunamadÄ±.{RESET}")
             print(f"{R}Detay: {e}{RESET}")
             print(f"{Y}VeritabanÄ± yapÄ±sÄ± beklenenden farklÄ± olabilir.{RESET}")
             return None
        except Exception as e:
            print(f"{R}Mesaj analizi sÄ±rasÄ±nda beklenmedik hata: {e}{RESET}")
            traceback.print_exc()
            return None

    def visualize_activity_by_hour(self, df: pd.DataFrame, output_file="activity_by_hour.png"):
        """Mesaj aktivitesini saate gÃ¶re gÃ¶rselleÅŸtirir."""
        if df is None or df.empty:
             print(f"{Y}GÃ¶rselleÅŸtirilecek mesaj verisi yok.{RESET}")
             return
        if 'matplotlib' not in sys.modules:
             print(f"{R}Hata: 'matplotlib' yÃ¼klenemediÄŸi iÃ§in gÃ¶rselleÅŸtirme yapÄ±lamÄ±yor.{RESET}")
             return

        print(f"{C}Saatlik aktivite grafiÄŸi oluÅŸturuluyor -> {output_file}{RESET}")
        try:
            # Saate gÃ¶re grupla ve mesaj sayÄ±sÄ±nÄ± al
            hourly_activity = df.groupby(df['datetime'].dt.hour).size() # size() veya count()['unix_time']

            plt.figure(figsize=(12, 6)) # Grafik boyutu
            hourly_activity.plot(kind='bar', color='skyblue')
            plt.title('Saatlere GÃ¶re Mesaj Aktivitesi')
            plt.xlabel('Saat (0-23)')
            plt.ylabel('Mesaj SayÄ±sÄ±')
            plt.xticks(rotation=0) # X ekseni yazÄ±larÄ±nÄ± dÃ¼z yap
            plt.grid(axis='y', linestyle='--') # Arka plan Ã§izgileri
            plt.tight_layout() # Kenar boÅŸluklarÄ±nÄ± ayarla

            # Dosyaya kaydet
            plt.savefig(output_file)
            plt.close() # GrafiÄŸi kapat (bellekte kalmasÄ±n)
            print(f"{G}ğŸ“Š Aktivite grafiÄŸi baÅŸarÄ±yla kaydedildi: {output_file}{RESET}")

        except Exception as e:
            print(f"{R}Grafik oluÅŸturulurken hata oluÅŸtu: {e}{RESET}")
            traceback.print_exc()

    # Medya analizi (PIL gerektirir)
    def extract_media_metadata(self, limit=10):
        """VeritabanÄ±ndaki medya bilgilerini okur (limitli)."""
        if not self.conn: return
        if 'PIL' not in sys.modules:
             print(f"{R}Hata: 'Pillow' kÃ¼tÃ¼phanesi yÃ¼klenemediÄŸi iÃ§in medya analizi yapÄ±lamÄ±yor.{RESET}")
             return

        print(f"\n{C}Medya metadatasÄ± okunuyor (ilk {limit} kayÄ±t)...{RESET}")
        try:
            # message_media tablosu ve sÃ¼tunlarÄ± kontrol edilmeli
            # SÃ¼tunlar: message_row_id, chat_row_id, file_path, file_size, mime_type, media_key, width, height...
            # raw_data genellikle thumbnail iÃ§erir, tam dosya file_path'te olabilir.
            query = f"SELECT message_row_id, file_path, mime_type, file_size, width, height FROM message_thumbnails LIMIT {limit}" # Thumbnails daha gÃ¼venli
            # query = f"SELECT _id, file_path, mime_type, size, width, height FROM media_data LIMIT {limit}" # media_data tablosu varsa
            media_df = pd.read_sql_query(query, self.conn)

            if media_df.empty:
                 print(f"{Y}VeritabanÄ±nda medya bilgisi bulunamadÄ± (veya tablo adÄ± yanlÄ±ÅŸ).{RESET}")
                 return

            print(f"{G}Bulunan Medya KayÄ±tlarÄ±:{RESET}")
            for index, row in media_df.iterrows():
                 # Bilgileri yazdÄ±r
                 print(f" - ID: {row['message_row_id']}, Tip: {row['mime_type']}, Boyut: {row.get('file_size', 'N/A')}, "
                       f"Ã‡Ã¶zÃ¼nÃ¼rlÃ¼k: {row.get('width','?')}x{row.get('height','?')}, Path: {row.get('file_path', 'N/A')}")

                 # raw_data varsa ve Pillow kuruluysa resmi aÃ§mayÄ± deneyebiliriz ama riskli.
                 # try:
                 #     if row['raw_data']:
                 #         img = Image.open(BytesIO(row['raw_data']))
                 #         print(f"    Thumbnail Boyutu: {img.size}")
                 # except Exception as img_err:
                 #     print(f"    Thumbnail okuma hatasÄ±: {img_err}")

        except pd.io.sql.DatabaseError as e:
             print(f"{R}Medya bilgisi okunurken SQL HatasÄ±: {e}{RESET}")
             print(f"{Y}'message_thumbnails' veya 'media_data' tablosu/sÃ¼tunlarÄ± bulunamadÄ± veya farklÄ±.{RESET}")
        except Exception as e:
             print(f"{R}Medya analizi sÄ±rasÄ±nda beklenmedik hata: {e}{RESET}")
             traceback.print_exc()


# Ana Ã‡alÄ±ÅŸtÄ±rma BloÄŸu
if __name__ == "__main__":
    db_file = input(f"Analiz edilecek WhatsApp veritabanÄ± dosyasÄ±nÄ±n yolu [VarsayÄ±lan: {DEFAULT_DB_PATH}]: ").strip() or DEFAULT_DB_PATH

    analyzer = None
    try:
        analyzer = WhatsAppAnalyzer(db_path=db_file)
        df_messages = analyzer.analyze_messages()

        if df_messages is not None and not df_messages.empty:
             print("\n--- Analiz SeÃ§enekleri ---")
             print("1: Saatlik Aktivite GrafiÄŸi OluÅŸtur")
             print("2: Medya MetadatasÄ±nÄ± GÃ¶ster (Limitli)")
             print("0: Ã‡Ä±kÄ±ÅŸ")
             choice = input("Yapmak istediÄŸiniz iÅŸlem: ").strip()

             if choice == '1':
                  analyzer.visualize_activity_by_hour(df_messages)
             elif choice == '2':
                  analyzer.extract_media_metadata(limit=20) # Ä°lk 20 medyayÄ± gÃ¶ster
             else:
                  print("Ã‡Ä±kÄ±lÄ±yor.")

    except FileNotFoundError:
         print(f"{R}Program sonlandÄ±rÄ±ldÄ± (VeritabanÄ± dosyasÄ± bulunamadÄ±).{RESET}")
    except ValueError as e: # Mesages tablosu bulunamadÄ± vb.
         print(f"{R}Program sonlandÄ±rÄ±ldÄ± (VeritabanÄ± HatasÄ±: {e}).{RESET}")
    except Exception as e:
         print(f"{R}Ana programda beklenmedik hata: {e}{RESET}")
         traceback.print_exc()
    finally:
         # BaÄŸlantÄ±yÄ± kapat
         if analyzer:
              analyzer.close_connection()